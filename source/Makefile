CC=gcc
CXX=g++
RM=rm -f
CXXFLAGS=-Wall -g 

SRCS=llist.cpp funtemplate.cpp refer.cpp refer1.cpp virtual.cpp cppio.cpp basicTypeSize.cpp basicType.cpp floatprint.cpp arith.cpp \
	relational.cpp decimaking.cpp switch.cpp stringn.cpp arraysum.cpp arrayprint.cpp twodarray.cpp twodzero.cpp maxind.cpp \
	findtwonum.cpp longparen.cpp jumpnum.cpp connnode.cpp bstCountNodes.cpp bottomview.cpp topview.cpp convertfive.cpp \
	remdup.cpp nextgreatest.cpp countsubstr.cpp threecandidates.cpp setbits.cpp bintodec.cpp pfn.cpp stringgame.cpp finduncommon.cpp \
	decode.cpp convertroman.cpp interleavestr.cpp countpalin.cpp countdistpalin.cpp listcountpair.cpp listpalin.cpp listreversegrp.cpp \
	flatten.cpp graphCycleUndirect.cpp findFirstSickKid.cpp isUniqueString.cpp remDupl.cpp testDataStruct.cpp permstring.cpp \
	checkAnagram.cpp strReplSpace.cpp
OBJS=$(subst .cpp,.o,$(SRCS))

all: llist funtemplate refer refer1 virtual cppio basicType floatprint arith relational decimaking switch stringn \
	arraysum arrayprint twodarray twodzero maxind findtwonum longparen jumpnum connnode bstCountNodes bottomview topview convertfive \
	remdup nextgreatest countsubstr threecandidates setbits bintodec pfn stringgame finduncommon decode convertroman interleavestr \
	countpalin countdistpalin listcountpair listpalin listreversegrp flatten graphCycleUndirect findFirstSickKid isUniqueString \
	remDupl testDataStruct permstring checkAnagram strReplSpace

llist: llist.o
	$(CXX) $(CXXFLAGS) -o llist llist.o

llist.o: llist.cpp Smartptr.h
	$(CXX) $(CXXFLAGS) -c llist.cpp
	
funtemplate: funtemplate.o
	$(CXX) $(CXXFLAGS) -o funtemplate funtemplate.o
	
funtemplate.o: funtemplate.cpp
	$(CXX) $(CXXFLAGS) -c funtemplate.cpp
	
refer: refer.o
	$(CXX) $(CXXFLAGS) -o refer refer.o
	
refer.o: refer.cpp 
	$(CXX) $(CXXFLAGS) -c refer.cpp
	
refer1: refer1.o
	$(CXX) $(CXXFLAGS) -o refer1 refer1.o
	
refer1.o: refer1.cpp
	$(CXX) $(CXXFLAGS) -c refer1.cpp

virtual: virtual.o
	$(CXX) $(CXXFLAGS) -o virtual virtual.o
	
virtual.o: virtual.cpp
	$(CXX) $(CXXFLAGS) -c virtual.cpp

cppio: cppio.o
	$(CXX) $(CXXFLAGS) -o cppio cppio.o

cppio.o: cppio.cpp
	$(CXX) $(CXXFLAGS) -c cppio.cpp
	
basicTypeSize: basicTypeSize.o
	$(CXX) $(CXXFLAGS) -o basicTypeSize basicTypeSize.o

basicTypeSize.o: basicTypeSize.cpp
	$(CXX) $(CXXFLAGS) -c basicTypeSize.cpp

basicType: basicType.o
	$(CXX) $(CXXFLAGS) -o basicType basicType.o

basicType.o: basicType.cpp
	$(CXX) $(CXXFLAGS) -c basicType.cpp

floatprint: floatprint.o
	$(CXX) $(CXXFLAGS) -o floatprint floatprint.o

floatprint.o: floatprint.cpp
	$(CXX) $(CXXFLAGS) -c floatprint.cpp

arith: arith.o
	$(CXX) $(CXXFLAGS) -o arith arith.o

arith.o: arith.cpp
	$(CXX) $(CXXFLAGS) -c arith.cpp
	
relational: relational.o
	$(CXX) $(CXXFLAGS) -o relational relational.o

relational.o: relational.cpp
	$(CXX) $(CXXFLAGS) -c relational.cpp
	
decimaking: decimaking.o
	$(CXX) $(CXXFLAGS) -o decimaking decimaking.o

decimaking.o: decimaking.cpp
	$(CXX) $(CXXFLAGS) -c decimaking.cpp
	
switch: switch.o
	$(CXX) $(CXXFLAGS) -o switch switch.o

switch.o: switch.cpp
	$(CXX) $(CXXFLAGS) -c switch.cpp

stringn: stringn.o
	$(CXX) $(CXXFLAGS) -o stringn stringn.o

stringn.o: stringn.cpp
	$(CXX) $(CXXFLAGS) -c stringn.cpp

arraysum: arraysum.o
	$(CXX) $(CXXFLAGS) -o arraysum arraysum.o

arraysum.o: arraysum.cpp
	$(CXX) $(CXXFLAGS) -c arraysum.cpp
	
arrayprint: arrayprint.o
	$(CXX) $(CXXFLAGS) -o arrayprint arrayprint.o

arrayprint.o: arrayprint.cpp
	$(CXX) $(CXXFLAGS) -c arrayprint.cpp
	
twodarray: twodarray.o
	$(CXX) $(CXXFLAGS) -o twodarray twodarray.o

twodarray.o: twodarray.cpp
	$(CXX) $(CXXFLAGS) -c twodarray.cpp

twodzero: twodzero.o
	$(CXX) $(CXXFLAGS) -o twodzero twodzero.o

twodzero.o: twodzero.cpp
	$(CXX) $(CXXFLAGS) -c twodzero.cpp

maxind: maxind.o
	$(CXX) $(CXXFLAGS) -o maxind maxind.o

maxind.o: maxind.cpp
	$(CXX) $(CXXFLAGS) -c maxind.cpp
	
findtwonum: findtwonum.o
	$(CXX) $(CXXFLAGS) -o findtwonum findtwonum.o

findtwonum.o: findtwonum.cpp
	$(CXX) $(CXXFLAGS) -c findtwonum.cpp
	
longparen: longparen.o
	$(CXX) $(CXXFLAGS) -o longparen longparen.o

longparen.o: longparen.cpp
	$(CXX) $(CXXFLAGS) -c longparen.cpp
	
jumpnum: jumpnum.o
	$(CXX) $(CXXFLAGS) -o jumpnum jumpnum.o

jumpnum.o: jumpnum.cpp
	$(CXX) $(CXXFLAGS) -c jumpnum.cpp

connnode: connnode.o
	$(CXX) $(CXXFLAGS) -o connnode connnode.o

connnode.o: connnode.cpp
	$(CXX) $(CXXFLAGS) -c connnode.cpp

bstCountNodes: bstCountNodes.o
	$(CXX) $(CXXFLAGS) -o bstCountNodes bstCountNodes.o

bstCountNodes.o: bstCountNodes.cpp
	$(CXX) $(CXXFLAGS) -c bstCountNodes.cpp

bottomview: bottomview.o
	$(CXX) $(CXXFLAGS) -o bottomview bottomview.o

bottomview.o: bottomview.cpp
	$(CXX) $(CXXFLAGS) -c bottomview.cpp

topview: topview.o
	$(CXX) $(CXXFLAGS) -o topview topview.o

topview.o: topview.cpp
	$(CXX) $(CXXFLAGS) -c topview.cpp
	
convertfive: convertfive.o
	$(CXX) $(CXXFLAGS) -o convertfive convertfive.o

convertfive.o: convertfive.cpp
	$(CXX) $(CXXFLAGS) -c convertfive.cpp
	
remdup: remdup.o
	$(CXX) $(CXXFLAGS) -o remdup remdup.o

remdup.o: remdup.cpp
	$(CXX) $(CXXFLAGS) -c remdup.cpp
	
nextgreatest: nextgreatest.o
	$(CXX) $(CXXFLAGS) -o nextgreatest nextgreatest.o

nextgreatest.o: nextgreatest.cpp
	$(CXX) $(CXXFLAGS) -c nextgreatest.cpp
	
countsubstr: countsubstr.o
	$(CXX) $(CXXFLAGS) -o countsubstr countsubstr.o

countsubstr.o: countsubstr.cpp
	$(CXX) $(CXXFLAGS) -c countsubstr.cpp
	
threecandidates: threecandidates.o
	$(CXX) $(CXXFLAGS) -o threecandidates threecandidates.o

threecandidates.o: threecandidates.cpp
	$(CXX) $(CXXFLAGS) -c threecandidates.cpp
	
setbits: setbits.o
	$(CXX) $(CXXFLAGS) -o setbits setbits.o

setbits.o: setbits.cpp
	$(CXX) $(CXXFLAGS) -c setbits.cpp
	
bintodec: bintodec.o
	$(CXX) $(CXXFLAGS) -o bintodec bintodec.o

bintodec.o: bintodec.cpp
	$(CXX) $(CXXFLAGS) -c bintodec.cpp

pfn: pfn.o
	$(CXX) $(CXXFLAGS) -o pfn pfn.o

pfn.o: pfn.cpp
	$(CXX) $(CXXFLAGS) -c pfn.cpp
	
stringgame: stringgame.o
	$(CXX) $(CXXFLAGS) -o stringgame stringgame.o

stringgame.o: stringgame.cpp
	$(CXX) $(CXXFLAGS) -c stringgame.cpp

finduncommon: finduncommon.o
	$(CXX) $(CXXFLAGS) -o finduncommon finduncommon.o

finduncommon.o: finduncommon.cpp
	$(CXX) $(CXXFLAGS) -c finduncommon.cpp

decode: decode.o
	$(CXX) $(CXXFLAGS) -o decode decode.o

decode.o: decode.cpp
	$(CXX) $(CXXFLAGS) -c decode.cpp

convertroman: convertroman.o
	$(CXX) $(CXXFLAGS) -o convertroman convertroman.o

convertroman.o: convertroman.cpp
	$(CXX) $(CXXFLAGS) -c convertroman.cpp

interleavestr: interleavestr.o
	$(CXX) $(CXXFLAGS) -o interleavestr interleavestr.o

interleavestr.o: interleavestr.cpp
	$(CXX) $(CXXFLAGS) -c interleavestr.cpp
	
countpalin: countpalin.o
	$(CXX) $(CXXFLAGS) -o countpalin countpalin.o

countpalin.o: countpalin.cpp
	$(CXX) $(CXXFLAGS) -c countpalin.cpp
	
countdistpalin: countdistpalin.o
	$(CXX) $(CXXFLAGS) -o countdistpalin countdistpalin.o

countdistpalin.o: countdistpalin.cpp
	$(CXX) $(CXXFLAGS) -c countdistpalin.cpp
	
listcountpair: listcountpair.o
	$(CXX) $(CXXFLAGS) -o listcountpair listcountpair.o

listcountpair.o: listcountpair.cpp
	$(CXX) $(CXXFLAGS) -c listcountpair.cpp

listpalin: listpalin.o
	$(CXX) $(CXXFLAGS) -o listpalin listpalin.o

listpalin.o: listpalin.cpp
	$(CXX) $(CXXFLAGS) -c listpalin.cpp

listreversegrp: listreversegrp.o
	$(CXX) $(CXXFLAGS) -o listreversegrp listreversegrp.o

listreversegrp.o: listreversegrp.cpp
	$(CXX) $(CXXFLAGS) -c listreversegrp.cpp

flatten: flatten.o
	$(CXX) $(CXXFLAGS) -o flatten flatten.o

flatten.o: flatten.cpp
	$(CXX) $(CXXFLAGS) -c flatten.cpp
	
graphCycleUndirect: graphCycleUndirect.o
	$(CXX) $(CXXFLAGS) -o graphCycleUndirect graphCycleUndirect.o

graphCycleUndirect.o: graphCycleUndirect.cpp
	$(CXX) $(CXXFLAGS) -c graphCycleUndirect.cpp

findFirstSickKid: findFirstSickKid.o
	$(CXX) $(CXXFLAGS) -o findFirstSickKid findFirstSickKid.o

findFirstSickKid.o: findFirstSickKid.cpp
	$(CXX) $(CXXFLAGS) -c findFirstSickKid.cpp

isUniqueString: isUniqueString.o
	$(CXX) $(CXXFLAGS) -o isUniqueString isUniqueString.o

isUniqueString.o: isUniqueString.cpp
	$(CXX) $(CXXFLAGS) -c isUniqueString.cpp

remDupl: remDupl.o
	$(CXX) $(CXXFLAGS) -o remDupl remDupl.o

remDupl.o: remDupl.cpp
	$(CXX) $(CXXFLAGS) -c remDupl.cpp
	
testDataStruct: testDataStruct.o
	$(CXX) $(CXXFLAGS) -o testDataStruct testDataStruct.o

testDataStruct.o: testDataStruct.cpp
	$(CXX) $(CXXFLAGS) -c testDataStruct.cpp

permstring: permstring.o
	$(CXX) $(CXXFLAGS) -o permstring permstring.o

permstring.o: permstring.cpp
	$(CXX) $(CXXFLAGS) -c permstring.cpp
	
checkAnagram: checkAnagram.o
	$(CXX) $(CXXFLAGS) -o checkAnagram checkAnagram.o

checkAnagram.o: checkAnagram.cpp
	$(CXX) $(CXXFLAGS) -c checkAnagram.cpp
	
strReplSpace: strReplSpace.o
	$(CXX) $(CXXFLAGS) -o strReplSpace strReplSpace.o

strReplSpace.o: strReplSpace.cpp
	$(CXX) $(CXXFLAGS) -c strReplSpace.cpp

clean:
	$(RM) $(OBJS)
	$(RM) llist funtemplate refer refer1 virtual cppio basicTypeSize basicType floatprint arith relational decimaking switch stringn \
	arraysum arrayprint twodarray twodzero maxind findtwonum longparen jumpnum connnode bstCountNodes bottomview topview convertfive \
	remdup nextgreatest countsubstr threecandidates setbits bintodec pfn stringgame finduncommon decode convertroman interleavestr \
	countpalin countdistpalin listcountpair listpalin listreversegrp flatten graphCycleUndirect findFirstSickKid isUniqueString \
	remDupl testDataStruct permstring checkAnagram strReplSpace
	
distclean:
	$(RM) llist
	